import sys
import ast 
import os
import json
from ast_tree import ast_tree, createTree
from json_visitor import json_visitor
from node_visitor import node_visitor

filename = ''

def parse_args(args):
    if(len(args) != 2): 
        print("Invalid number of arguments.")
        print("Expected format: python3 ./bo-analyser.py program.json patterns.json")
        exit()
    global filename
    filename = args[0][0:args[0].index('.json')]
    if(os.path.isfile(args[0])):
        file = open(args[0],'r')
    else: 
        print("Input needs to be a file.")
        exit()
        
    json_ast_tree = ""
    for x in file: 
        json_ast_tree += x
    file.close()
    
    if(os.path.isfile(args[1])):
        file = open(args[1],'r')
    else: 
        print("Input needs to be a file.")
        exit()
    
    json_patterns = ""
    for x in file: 
        json_patterns += x
    file.close()

    ast_tree = json.loads(json_ast_tree)
    patterns = json.loads(json_patterns)
    return ast_tree, patterns

def print_ast(ast_tree): 
    for el in ast_tree: 
        if isinstance(el,list): 
            print_ast(el)
        else: 
            for key in el: 
                value = el[key]
                print("The key and value are ({}) = ({})".format(key,value))


def flowStudy(ast,patterns):
    vulns = []
    for pattern in patterns:
        variable_level = {}
        vulnerable_sources = pattern["sources"]
        sinks = pattern["sinks"]
        sanitizers = pattern["sanitizers"]
        nd = node_visitor(variable_level,vulnerable_sources,sinks,sanitizers,pattern['vulnerability'])
        nd.visit_general_node(ast.head)
        vulnerabilties = nd.getVulnerabilities()
        for vuln in vulnerabilties:
            vulns.append(vuln)
    output = open(filename + '.output.json','w+')
    for vuln in vulns:
        json.dump(vuln,output)

def main(args=sys.argv[1:]): 
    ast_tree, patterns = parse_args(args)
    ast = createTree(ast_tree)
    flowStudy(ast,patterns)
    
if __name__ == '__main__': 
    main()

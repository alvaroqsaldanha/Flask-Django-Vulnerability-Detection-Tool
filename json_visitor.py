from Nodes.ast_node import ast_node
from Nodes.ast_call_node import ast_call_node
from Nodes.ast_assign_node import ast_assign_node
from Nodes.ast_name_node import ast_name_node
from Nodes.ast_ifwhile_node import ast_ifwhile_node

class json_visitor():
	def visit_module(self,json):
		main = ast_node('Module')
		for el in json:
			if el["ast_type"] == "If":
				main.addChild(self.visit_if(el))
			elif el["ast_type"] == "While":
				main.addChild(self.visit_while(el))
			elif el["ast_type"] == "Assign":
				main.addChild(self.visit_assign(el))
			elif el["ast_type"] =="Expr":
				main.addChild(self.visit_expr(el['value']))
		return main

	def visit_assign(self,json):
		main = ast_assign_node('Assign')
		for el in json["targets"]:
			main.vars.append(el["id"])
		main.addChild(self.visit_expr(json["value"]))
		return main

	def visit_expr(self,json):
		main = ast_node('Expr')
		if json['ast_type'] == 'BinOp':
			main.addChild(self.visit_binop(json))
		elif json['ast_type'] == 'Compare':
			main.addChild(self.visit_compare(json))
		elif json['ast_type'] == 'Constant':
			main.addChild(self.visit_constant(json))
		elif json['ast_type'] == 'Name':
			main.addChild(self.visit_name(json))
		elif json['ast_type'] == 'Call':
			main.addChild(self.visit_call(json))
		elif json['ast_type'] == 'Attribute':
			main.addChild(self.visit_attribute(json))
		elif json['ast_type'] == 'Str':
			main.addChild(self.visit_string(json))
		elif json['ast_type'] == 'Num':
			main.addChild(self.visit_num(json))
		return main

	def visit_binop(self,json):
		main = ast_node('BinOp')
		main.addChild(self.visit_expr(json["left"]))
		main.addChild(self.visit_operator(json["op"]))
		main.addChild(self.visit_expr(json["right"]))
		return main

	def visit_compare(self,json):
		main = ast_node('Compare')
		main.addChild(self.visit_expr(json["left"]))
		for el in json["ops"]:
			main.addChild(self.visit_cmpop(el))
		for el in json["comparators"]:
			main.addChild(self.visit_expr(el))
		return main

	def visit_constant(self,json):
		main = ast_node('Constant')
		return main

	def visit_name(self,json):
		main = ast_name_node('Name',json["id"])
		return main

	def visit_call(self,json):
		main = ast_call_node('Call')
		main.funcName = json["func"]["id"]
		for el in json["args"]:
			main.addChild(self.visit_expr(el))
		return main

	def visit_attribute(self,json):
		main = ast_node('Attribute')
		main.addChild(self.visit_expr(json["value"]))
		return main

	def visit_cmpop(self,json):
		main = ast_node('Compare')
		return main

	def visit_operator(self,json):
		main = ast_node('Operator')
		return main

	def visit_if(self,json):
		main = ast_ifwhile_node('If')
		main.addChild(self.visit_expr(json["test"]))
		for el in json["body"]:
			if el["ast_type"] == "If":
				main.addChild(self.visit_if(el))
			elif el["ast_type"] == "While":
				main.addChild(self.visit_while(el))
			elif el["ast_type"] == "Assign":
				main.addChild(self.visit_assign(el))
			elif el["ast_type"] =="Expr":
				main.addChild(self.visit_expr(el['value']))			
		for el in json["orelse"]:
			if el["ast_type"] == "If":
				main.addElse(self.visit_if(el))
			elif el["ast_type"] == "While":
				main.addElse(self.visit_while(el))
			elif el["ast_type"] == "Assign":
				main.addElse(self.visit_assign(el))
			elif el["ast_type"] =="Expr":
				main.addElse(self.visit_expr(el['value']))
		return main

	def visit_while(self,json):
		main = ast_ifwhile_node('While')
		main.addChild(self.visit_expr(json["test"]))
		for el in json["body"]:
			if el["ast_type"] == "If":
				main.addChild(self.visit_if(el))
			elif el["ast_type"] == "While":
				main.addChild(self.visit_while(el))
			elif el["ast_type"] == "Assign":
				main.addChild(self.visit_assign(el))
			elif el["ast_type"] =="Expr":
				main.addChild(self.visit_expr(el['value']))			
		for el in json["orelse"]:
			if el["ast_type"] == "If":
				main.addElse(self.visit_if(el))
			elif el["ast_type"] == "While":
				main.addElse(self.visit_while(el))
			elif el["ast_type"] == "Assign":
				main.addElse(self.visit_assign(el))
			elif el["ast_type"] =="Expr":
				main.addElse(self.visit_expr(el['value']))
		return main

	def visit_string(self,json):
		main = ast_node('Str')
		return main

	def visit_num(self,json):
		main = ast_node('Num')
		return main









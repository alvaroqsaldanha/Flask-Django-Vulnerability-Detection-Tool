import copy

class node_visitor():
	def __init__(self,variable_level,sources,sinks,sanitizers,vuln):
		self.vulnerability = vuln
		self.variable_level = {}
		self.sources = sources
		self.sinks = sinks
		self.sanitizers = sanitizers
		self.stack = []
		self.vulnerabilities = []
		self.level = 0
		self.if_indexes = {}
		self.else_variable_level = {}
		self.in_else = []
		self.current_function = ''
		self.condition_variables = []
		self.high_condition = False
		self.high_condition_sources = []
		self.high_condition_sanitizers = []
		self.in_if_condition = False
		self.in_while_first = False

	def getVulnerabilities(self):
		return self.vulnerabilities

	def visit_general_node(self,node):
		children = node.getChildren()
		if node.name == 'Constant' or node.name == 'Comparator' or node.name == 'Operator':
			if node.name == 'Constant' and self.high_condition:
				if self.current_function != '':
					return {'level':0,'source':[],'sanitizers':[]}
				return {'level':1,'source':self.high_condition_sources,'sanitizers':self.high_condition_sanitizers}
			return {'level': 0,'source': [],'sanitizers': []}
		elif node.name == 'Expr' or node.name == 'BinOp' or node.name == 'Compare':
			results = []
			for child in children:
				results.append(child.accept(self))
			sources = []
			sanitizers = []
			level = 0
			for levelDict in results:
				if levelDict['level'] == 1:
					level = 1
				if isinstance(levelDict['source'],list):
					for source in levelDict['source']:
						if source not in sources and source is not None:
							sources.append(source)
				elif levelDict['source'] is not None:
					sources.append(levelDict['source'])
				if isinstance(levelDict['sanitizers'],list):
					for sanitizer in levelDict['sanitizers']:
						if sanitizer not in sanitizers:
							sanitizers.append(sanitizer)
			return {'level':level,'source':sources,'sanitizers':sanitizers}
		else:
			for child in children:
				child.accept(self)

	def visit_ifwhile_node(self,node):
		children = node.getChildren()
		self.level += 1
		self.else_variable_level[self.level] = copy.deepcopy(self.variable_level)
		if node.name == 'If' or node.name == 'While':
			if node.name == 'While':
				self.in_while_first = True
			self.in_if_condition = True
			self.high_condition_sources = []
			self.high_condition_sanitizers = []
			self.high_condition = False
			result = children[0].accept(self)
			for var in self.condition_variables:
				for bvar in self.else_variable_level[self.level].keys():
					elsenodes = node.getElse()
					if node.name == 'If' and var == bvar and self.else_variable_level[self.level][bvar]['level'] == 1 and result['level'] == 1 and len(elsenodes) > 0:
						self.high_condition = True
					elif node.name == 'While' and var == bvar and self.else_variable_level[self.level][bvar]['level'] == 1 and result['level'] == 1:
						self.high_condition = True
					elif node.name == 'If' and var == bvar and self.else_variable_level[self.level][bvar]['level'] == 0 and len(self.else_variable_level[self.level][var]['sanitizers']) > 0 and len(elsenodes) > 0:
						self.high_condition = True
			if self.high_condition:
				self.high_condition_sources = result['source']
				self.high_condition_sanitizers = result['sanitizers']
			self.in_if_condition = False
			for child in children[1:]:			
				child.accept(self)
			if node.name == 'While':
				self.in_while_first = False	
		if node.name == 'While':
			for child in children:
				child.accept(self)		
		elsenodes = node.getElse()
		if len(elsenodes) > 0:
			self.in_else.append(self.level)
		else:
			self.in_else.append(0)
		for elsenode in elsenodes:
			elsenode.accept(self)
		for var in self.else_variable_level[self.level].keys():
			if self.level == 1:
				if var not in self.variable_level.keys():
					self.variable_level[var] = self.else_variable_level[self.level][var]
				else:
					new_variable_level = {'level':self.variable_level[var]['level'],'source':self.variable_level[var]['source'],'sanitizers':self.variable_level[var]['sanitizers']}
					if self.else_variable_level[self.level][var]['level'] == 1:
						new_variable_level['level'] = 1
					for source in self.else_variable_level[self.level][var]['source']:
						if source not in self.variable_level[var]['source']:
							new_variable_level['source'].append(source)
					for sani in self.else_variable_level[self.level][var]['sanitizers']:
						if sani not in self.variable_level[var]['sanitizers']:
							new_variable_level['sanitizers'].append(sani)
					self.variable_level[var] = new_variable_level
			else:
				if var not in self.else_variable_level[self.level - 1]:
					self.else_variable_level[self.level - 1][var] = self.else_variable_level[self.level][var]
				else:
					new_variable_level = {'level':self.else_variable_level[self.level - 1][var]['level'],'source':self.else_variable_level[self.level - 1][var]['source'],'sanitizers':self.else_variable_level[self.level - 1][var]['sanitizers']}
					if self.else_variable_level[self.level][var]['level'] == 1:
						new_variable_level['level'] = 1
					for source in self.else_variable_level[self.level][var]['source']:
						if source not in self.else_variable_level[self.level][var]['source']:
							new_variable_level['source'].append(source)
					for sani in self.else_variable_level[self.level][var]['sanitizers']:
						if sani not in self.else_variable_level[self.level][var]['sanitizers']:
							new_variable_level['sanitizers'].append(sani)
					self.else_variable_level[self.level - 1][var] = new_variable_level
		self.high_condition = False
		self.in_else.pop()
		self.level -= 1

	def visit_assign_node(self,node):
		ids = node.getVars()
		children = node.getChildren()
		if len(ids) == len(children) and len(ids) != 1:
			for var,child in zip(ids,children):
				if self.level >= 1 and len(self.in_else) != 0 and self.level == self.in_else[len(self.in_else) - 1] and var not in self.else_variable_level[self.level].keys():
					self.if_indexes[var] = (self.level,True)
					if var in self.sources:
						self.else_variable_level[self.level][var] = {'level': 1,'source': [var], 'sanitizers': []}
					else:
						self.else_variable_level[self.level][var] = {'level': 0,'source': [], 'sanitizers': []}
				elif var not in self.variable_level.keys():
					if self.level > 0:
						self.if_indexes[var] = (self.level,True)
					if var in self.sources:
						self.variable_level[var] = {'level': 1,'source': [var], 'sanitizers': []}
					else:
						self.variable_level[var] = {'level': 0,'source': [], 'sanitizers': []}					
				danger = child.accept(self)
				if self.level >= 1 and len(self.in_else) != 0 and self.level == self.in_else[len(self.in_else) - 1] and var in self.else_variable_level[self.level].keys() and var in self.variable_level.keys():
					if var in self.if_indexes.keys():
						new_tuple = (self.if_indexes[var][0],False)
						self.if_indexes[var] = new_tuple
				if var not in self.sources:
					if self.level >= 1 and len(self.in_else) != 0 and self.level == self.in_else[len(self.in_else) - 1]:
						self.else_variable_level[self.level][var]['level'] = danger['level'] 
					else:
						self.variable_level[var]['level'] = danger['level'] 
				if self.level >= 1 and len(self.in_else) != 0 and self.level == self.in_else[len(self.in_else) - 1]:
					self.else_variable_level[self.level][var]['sanitizers'] = danger['sanitizers']
					for source in danger['source']:
						if source not in self.else_variable_level[self.level][var]['source'] and source is not None:
							self.else_variable_level[self.level][var]['source'].append(source)
					if var in self.else_variable_level[self.level][var]['source'] and (self.in_while_first or self.else_variable_level[self.level][var]['level'] == 0):
						self.else_variable_level[self.level][var]['source'].remove(var)
				else:
					self.variable_level[var]['sanitizers'] = danger['sanitizers']
					for source in danger['source']:
						if source not in self.variable_level[var]['source'] and source is not None:
							self.variable_level[var]['source'].append(source)
					if var in self.variable_level[var]['source'] and (self.in_while_first or self.variable_level[var]['level'] == 0):
						self.variable_level[var]['source'].remove(var)
		else:
			for var in ids:
				if self.level >= 1 and len(self.in_else) != 0 and self.level == self.in_else[len(self.in_else) - 1] and var not in self.else_variable_level[self.level].keys():
					self.if_indexes[var] = (self.level,True)
					if var in self.sources:
						self.else_variable_level[self.level][var] = {'level': 1,'source': [var], 'sanitizers': []}
					else:
						self.else_variable_level[self.level][var] = {'level': 0,'source': [], 'sanitizers': []}
				elif var not in self.variable_level.keys():
					if self.level > 0:
						self.if_indexes[var] = (self.level,True)
					if var in self.sources:
						self.variable_level[var] = {'level': 1,'source': [var], 'sanitizers': []}
					else:
						self.variable_level[var] = {'level': 0,'source': [], 'sanitizers': []}			
			danger = children[0].accept(self)
			if self.level >= 1 and len(self.in_else) != 0 and self.level == self.in_else[len(self.in_else) - 1] and var in self.else_variable_level[self.level].keys() and var in self.variable_level.keys():
				if var in self.if_indexes.keys():
					new_tuple = (self.if_indexes[var][0],False)
					self.if_indexes[var] = new_tuple
			if var not in self.sources:
				if self.level >= 1 and len(self.in_else) != 0 and self.level == self.in_else[len(self.in_else) - 1]:
						self.else_variable_level[self.level][var]['level'] = danger['level'] 
				else:
					self.variable_level[var]['level'] = danger['level'] 
			if self.level >= 1 and len(self.in_else) != 0 and self.level == self.in_else[len(self.in_else) - 1]:
				self.else_variable_level[self.level][var]['sanitizers'] = danger['sanitizers']
				for source in danger['source']:
					if source not in self.else_variable_level[self.level][var]['source'] and source is not None:
						self.else_variable_level[self.level][var]['source'].append(source)
				if var in self.else_variable_level[self.level][var]['source'] and (self.in_while_first or self.else_variable_level[self.level][var]['level'] == 0):
					self.else_variable_level[self.level][var]['source'].remove(var)
			else:
				self.variable_level[var]['sanitizers'] = danger['sanitizers']
				for source in danger['source']:
					if source not in self.variable_level[var]['source'] and source is not None:
						self.variable_level[var]['source'].append(source)
				if var in self.variable_level[var]['source'] and (self.in_while_first or self.variable_level[var]['level'] == 0):
					self.variable_level[var]['source'].remove(var)		
		for var in ids:
			if var in self.sinks:
				if self.level >= 1 and len(self.in_else) != 0 and self.level == self.in_else[len(self.in_else) - 1]:
					if len(self.else_variable_level[self.level][var]['source']) >= 1:
						for source in self.else_variable_level[self.level][var]['source']:
							if self.checkPairSource(source,var)[0]:
								continue
							vuln = {'vulnerability':self.vulnerability}
							vuln['source'] = source
							vuln['sink'] = var
							if vuln['source'] == vuln['sink']:
								continue
							vuln['unsanitized flows'] = 'yes'
							vuln['sanitized flows'] = self.else_variable_level[self.level][var]['sanitizers']
							self.vulnerabilities.append(vuln)
				else:
					if len(self.variable_level[var]['source']) >= 1:
						for source in self.variable_level[var]['source']:
							if self.checkPairSource(source,var)[0]:
								continue
							vuln = {'vulnerability':self.vulnerability}
							vuln['source'] = source
							vuln['sink'] = var
							if vuln['source'] == vuln['sink']:
								continue
							vuln['unsanitized flows'] = 'yes'
							vuln['sanitized flows'] = self.variable_level[var]['sanitizers']
							self.vulnerabilities.append(vuln)



	def checkPairSource(self,source,sink):
		for i in range(len(self.vulnerabilities)):
			if self.vulnerabilities[i]['source'] == source and self.vulnerabilities[i]['sink'] == sink:
				return True, i
		return False, -1

	def visit_call_node(self,node):
		funcName = node.getFuncName()
		self.current_function = funcName
		self.stack.append(funcName)
		children = node.getChildren()
		if funcName in self.sources:
			results = []
			sources = []
			sanitizers = []
			for child in children:
				results.append(child.accept(self))
			for levelDict in results:
				for source in levelDict['source']:
					if source not in sources and source is not None:
						sources.append(source)
				for sanitizer in levelDict['sanitizers']:
					if sanitizer not in sanitizers and sanitizer is not None:
						sanitizers.append(sanitizer)
			sources.append(funcName)
			returnLevel = {'level': 1,'source' : sources, 'sanitizers' : sanitizers}	
		elif funcName in self.sanitizers:
			results = []
			sanitizers = []
			sources = []
			level = 0
			for child in children:
				results.append(child.accept(self))
			for levelDict in results:
				for source in levelDict['source']:
					if source not in sources and source is not None:
						sources.append(source)
				for sanitizer in levelDict['sanitizers']:
					if sanitizer not in sanitizers:
						sanitizers.append(sanitizer)
			if funcName not in sanitizers:
				sanitizers.append(funcName)
			returnLevel = {'level':0,'source':sources,'sanitizers':sanitizers}
			return returnLevel
		elif funcName in self.sinks:
			vulnArg = False
			vulnSanitizer = []
			vulnSource = []
			for child in children:
				result = child.accept(self)
				if len(result['source']) >= 1:
					for source in result['source']:
						verdade, index = self.checkPairSource(source,funcName)
						vulnArg = True
						vuln = {'vulnerability':self.vulnerability}
						vuln['source'] = source
						if source not in vulnSource and source is not None:
							vulnSource.append(source)
						vuln['sink'] = funcName
						if verdade and result['level'] == 1:
							self.vulnerabilities[index]['unsanitized flows'] = 'yes'
						elif not verdade and result['level'] == 0:
							vuln['unsanitized flows'] = 'no'
						elif not verdade and result['level'] == 1:
							vuln['unsanitized flows'] = 'yes'
						vuln['sanitized flows'] = []
						if len(result['sanitizers']) > 0:
							vuln['sanitized flows'] = [result['sanitizers']]
						for sanitizer in result['sanitizers']:
							if sanitizer not in vulnSanitizer:
								vulnSanitizer.append(sanitizer)
						if verdade and len(result['sanitizers']) > 0:
							if result['sanitizers'] not in self.vulnerabilities[index]['sanitized flows']:
								self.vulnerabilities[index]['sanitized flows'].append(vuln['sanitized flows'])
						elif verdade and len(result['sanitizers']) == 0:
							continue
						else:
							self.vulnerabilities.append(vuln)
			if vulnArg:
				returnLevel = {'level': 1,'source':vulnSource, 'sanitizers': vulnSanitizer}
			else:
				returnLevel = {'level': 0,'source':[], 'sanitizers': []}
		else:
			level = 0
			results = []
			sources = []
			sanitizers = []
			for child in children:
				results.append(child.accept(self))
			for levelDict in results:
				if 'level' in levelDict.keys():
					if levelDict['level'] == 1:
						level = 1
					if isinstance(levelDict['source'],list):
						for source in levelDict['source']:
							if source not in sources and source is not None:
								sources.append(source)
					elif levelDict['sources'] is not None:
						sources.append(levelDict['source'])
					if isinstance(levelDict['sanitizers'],list):
						for sanitizer in levelDict['sanitizers']:
							if sanitizer not in sanitizers:
								sanitizers.append(sanitizer)
					else:
						if levelDict['sanitizers'] is not None: 
							sanitizers.append(levelDict['sanitizers'])
			returnLevel = {'level':level,'source':sources,'sanitizers':sanitizers}
		self.stack.pop()
		self.current_function = ''
		return returnLevel

	def visit_name_node(self,node):
		varName = node.getVarName()
		if self.level >= 1 and len(self.in_else) != 0 and self.level == self.in_else[len(self.in_else) - 1]:
			if varName not in self.else_variable_level[self.level].keys():
				self.else_variable_level[self.level][varName] = {'level': 1, 'source': [varName], 'sanitizers': []}
			if self.current_function in self.sources and varName in self.sinks:
				if not self.checkPairSource(self.current_function,varName)[0]:
					vuln = {'vulnerability':self.vulnerability}
					vuln['source'] = self.current_function
					vuln['sink'] = varName
					vuln['sanitized flows'] = 'no'
					vuln['unsanitized flows'] = []
					self.vulnerabilities.append(vuln)
			if self.high_condition:
				self.else_variable_level[self.level][varName]['level'] = 1
				for source in self.high_condition_sources:
					if source not in self.else_variable_level[self.level][varName]['source']:
						self.else_variable_level[self.level][varName]['source'].append(source)
				for sanitizer in self.high_condition_sanitizers:
					if sanitizer not in self.else_variable_level[self.level][varName]['sanitizers']:
						self.else_variable_level[self.level][varName]['sanitizers'].append(sanitizer)			
			if self.in_if_condition:
				if varName not in self.condition_variables:
					self.condition_variables.append(varName)
			return self.else_variable_level[self.level][varName]
		else:
			if varName not in self.variable_level.keys():
				self.if_indexes[varName] = (self.level,True)
				self.variable_level[varName] = {'level': 1, 'source': [varName], 'sanitizers': []}
			if self.current_function in self.sources and varName in self.sinks:
				if not self.checkPairSource(self.current_function,varName)[0]:
					vuln = {'vulnerability':self.vulnerability}
					vuln['source'] = self.current_function
					vuln['sink'] = varName
					vuln['sanitized flows'] = 'no'
					vuln['unsanitized flows'] = []
					self.vulnerabilities.append(vuln)
			if varName in self.if_indexes.keys() and ((self.level < self.if_indexes[varName][0] and self.if_indexes[varName][1]) or (self.level <= self.if_indexes[varName][0] - 2 and not self.if_indexes[varName][1])):
				if varName not in self.variable_level[varName]['source']:
					self.variable_level[varName]['source'].append(varName)
				self.variable_level[varName]['level'] = 1
			if self.high_condition:
				self.variable_level[varName]['level'] = 1
				for source in self.high_condition_sources:
					if source not in self.variable_level[varName]['source']:
						self.variable_level[varName]['source'].append(source)
				for sanitizer in self.high_condition_sanitizers:
					if sanitizer not in self.variable_level[varName]['sanitizers']:
						self.variable_level[varName]['sanitizers'].append(sanitizer)	
			if self.in_if_condition:
				if varName not in self.condition_variables:
					self.condition_variables.append(varName)
			return self.variable_level[varName]


